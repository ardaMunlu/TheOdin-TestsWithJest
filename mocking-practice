CommonJS ve ESM arasındaki syntax farklarını inceledim, Babel kurarak npm ile test etmeyi başardım, farklı mocking komutlarını ve faydalarını araştırıp uyguladım.

math.js
export function add(a, b) {
  return a + b;
}

userService.js
import { add } from './math.js';
export function createUserScore(users) {
  return users.map(u => ({ ...u, score: add(u.posts, u.comments) }));
}

userService.test.js
import * as math from './math.js';
import { createUserScore } from './userService.js';

jest.mock('./math.js');
math.add.mockImplementation(() => 42);

test('uses mocked add', () => {
  const users = [{ id:1, posts:5, comments:3 }];
  expect(createUserScore(users)[0].score).toBe(42);
});


010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
// notifier.js
export function sendEmail(to, msg) {
  // Gerçek ortamda e-posta gönderir
}

// signup.js
export function signup(user, sendFn) {
  // Kayıt işlemleri…
  sendFn(user.email, 'Hoş geldiniz!');
}

// signup.test.js
import { signup } from './signup.js';

test('signup çağrısında sendEmail tetiklenmeli', () => {
  const mockSend = jest.fn();
  const user = { email: 'arda@example.com' };

  signup(user, mockSend);

  expect(mockSend).toHaveBeenCalledTimes(1);
  expect(mockSend).toHaveBeenCalledWith('arda@example.com', 'Hoş geldiniz!');
});
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
// math.js
export function add(a,b)  { return a + b; }
export function mul(a,b)  { return a * b; }

// userService.js
import * as math from './math.js';
export function getScore(x,y) {
  // karmaşık bir iş, ama skor hesaplarken math.add kullanıyor
  return math.add(x, y) * 2;
}

// userService.test.js
import * as math from './math.js';
import { getScore } from './userService.js';

jest.mock('./math.js');
// artı olarak, mocklanan tüm fonksiyonlar jest.fn() olur
math.add.mockImplementation((a,b) => 10);

test('getScore, math.add mock’unu kullanıyor', () => {
  expect(getScore(3,4)).toBe(20);  
  expect(math.add).toHaveBeenCalledWith(3,4);
});
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
/project
  /__mocks__
    axios.js
  api.js
  api.test.js
js
Kopyala
Düzenle
// __mocks__/axios.js
export default {
  get: jest.fn(() => Promise.resolve({ data: { users: [] }})),
  post: jest.fn(() => Promise.resolve({ data: { success: true }}))
};
js
Kopyala
Düzenle
// api.js
import axios from 'axios';
export async function fetchUsers() {
  const res = await axios.get('/users');
  return res.data.users;
}

// api.test.js
import axios from 'axios';
import { fetchUsers } from './api.js';

jest.mock('axios');        // otomatik olarak __mocks__/axios.js'i kullanır

test('fetchUsers boş liste döndürüyor', async () => {
  const users = await fetchUsers();
  expect(users).toEqual([]);
  expect(axios.get).toHaveBeenCalledWith('/users');
});
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
// apiFetch.js
export async function fetchData() {
  const res = await fetch('/data');
  return res.json();
}

// apiFetch.test.js
import { fetchData } from './apiFetch.js';

beforeEach(() => {
  global.fetch = jest.fn();
});
afterEach(() => {
  delete global.fetch;
});

test('fetchData doğru JSON döndürüyor', async () => {
  const fake = { foo: 'bar' };
  fetch.mockResolvedValue({ json: () => Promise.resolve(fake) });
  const data = await fetchData();
  expect(data).toEqual(fake);
  expect(fetch).toHaveBeenCalledWith('/data');
});
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
// timer.js
export function delayed(cb) {
  setTimeout(() => cb('sonuç'), 1000);
}

// timer.test.js
import { delayed } from './timer.js';

jest.useFakeTimers();

test('delayed 1s sonra cb çağrılır', () => {
  const cb = jest.fn();
  delayed(cb);
  // zaman akışını 1000ms ileri al
  jest.advanceTimersByTime(1000);
  expect(cb).toHaveBeenCalledWith('sonuç');
  jest.useRealTimers();
});
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
010101010101010101010101010101010101010110101010101010101010101101010110101010101010101010101011010101010101010101001010101001010101010101101010101010101010101011010101101010101010101010101010110101010101
